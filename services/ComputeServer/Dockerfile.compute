# syntax=docker/dockerfile:1.4
# ---- Base: Python 3.12.11 ----
FROM python:3.12.11-slim AS base

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_NO_CACHE_DIR=on

RUN apt-get update && apt-get install -y --no-install-recommends \
    tzdata ca-certificates curl && \
    rm -rf /var/lib/apt/lists/*

# 工作目錄
WORKDIR /srv

# 先複製 requirements 以利快取
COPY requirements.txt .

# 安裝 Python 套件
# RUN pip install --no-cache-dir -r requirements.txt
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install -r requirements.txt

# 複製其餘原始碼
COPY . .

# 建立錄影/日誌目錄（之後會被 volume 掛掉，但先確保存在）
RUN mkdir -p /var/log/streaming

# 預設時區用 UTC（ffmpeg 檔名已依 UTC）
ENV TZ=UTC

# 非 root 執行（更安全）
RUN useradd -r -u 10001 appuser && chown -R appuser:appuser /srv /var/log/streaming
USER appuser

# EXPOSE 9091

# 啟動 StreamingServer（FastAPI + Uvicorn）
CMD ["celery", "-A", "app.main:app", "worker",\
     "-l", "info",\
     "-Q", "default",\
     "-P", "prefork",\ 
     "-c", "4",\ 
     "--max-tasks-per-child=100",\
     "--prefetch-multiplier=1"]
# CMD ["celery", "-A", "app.main.app", "worker",
#      "-l", "info",
#      "-Q", "default",
#      "-P", "prefork",     # ← 多進程 pool（建議，CPU/GPU 任務都穩）
#      "-c", "4",           # ← 併發數（= 同時處理任務的 worker 數）
#      "--max-tasks-per-child=100",   # ← 跑 100 個任務就重啟 child，避免記憶體累積
#      "--prefetch-multiplier=1"]     # ← 降低搶先取得任務，減少長任務被佔用
# celery -A services.ComputeServer.CeleryApp.app  worker -l info -Q default -P solo
