services:
  postgres:
    image: postgres:15
    container_name: demo_postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_SUPERUSER}
      POSTGRES_PASSWORD: ${DB_SUPERPASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ../datas/postgres_data:/var/lib/postgresql/data
      - ./postgres/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - demo-network
  # fluent-bit:
  #   image: fluent/fluent-bit:2.2
  #   container_name: demo_fluent-bit
  #   ports: ["24224:24224"]
  #   volumes:
  #     - ../datas/logs:/logs
  #     - ./fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
  #   command: ["-c", "/fluent-bit/etc/fluent-bit.conf"]
  #   networks:
  #     - demo-network

  redis:
    image: redis:7
    container_name: demo_redis
    restart: always
    ports: ["6379:6379"]
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    networks:
      - demo-network

  minio:
    image: minio/minio:latest
    container_name: demo_minio
    restart: always
    env_file:
      - .env
    command: >
      server
      --console-address ":9001"
      /data1 /data2 /data3 /data4

    #如果要Demo可以使用
    #command: server --console-address ":9001" /data
    #volumes:
    #  - ../datas/minio/data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://127.0.0.1:9000/minio/health/live || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ../datas/minio_data/data1:/data1
      - ../datas/minio_data/data2:/data2
      - ../datas/minio_data/data3:/data3
      - ../datas/minio_data/data4:/data4
    
    networks:
      - demo-network
  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./minio/init-bucket.sh:/init-bucket.sh:ro
    entrypoint: ["/bin/sh", "/init-bucket.sh"]
    networks:
      - demo-network

  mediamtx:
    image: bluenviron/mediamtx:latest
    container_name: mediamtx
    restart: unless-stopped
    volumes:
      - ./mediamtx/mediamtx.yml:/mediamtx.yml:ro   # 放到你 repo 裡的某處
      - ../datas/streaming/recordings:/recordings
    environment:
      - MTX_PATH=/mediamtx.yml
    ports:
      - "8554:8554/tcp" # RTSP
      - "8888:8888/tcp" # HLS
      - "8189:8189/udp" # WebRTC (UDP)
      - "8189:8189/tcp" # WebRTC (TCP，必要時)  
      - "8889:8889"
    networks:
      - demo-network
  api:
    build:
      context: ../services/APIServer
      dockerfile: Dockerfile.api
    container_name: api_server
    restart: unless-stopped
    env_file: [.env]
    environment:
      - LOG_DIR=/var/log/api
    volumes:
      - ../datas/logs/api:/var/log/api
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8000/api/v1/healthz || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 5
    networks: [demo-network]
    depends_on:
      - postgres
      - redis
      - minio

  compute:
    build:
      context: ../services/ComputeServer
      dockerfile: Dockerfile.compute
    container_name: compute_server
    restart: unless-stopped
    env_file: [.env]
    environment:
      - LOG_DIR=/var/log/compute
      - TRANSFORMERS_CACHE=/srv/app/adapters/.cache/transformers
      - HF_HOME=/srv/app/adapters/.cache/huggingface
    volumes:
      - ../datas/logs/compute:/var/log/compute
      - ../datas/compute/adapters:/srv/app/adapters:rw
    networks: [demo-network]
    depends_on:
      - mediamtx
      - minio
      - minio-init
      - api
      - redis
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all            # 想用幾張卡；用 all 代表全部
              capabilities: [gpu] # 必填：要求的是 GPU 能力
  streaming:
    build:
      context: ../services/StreamingServer
      dockerfile: Dockerfile.streaming
    container_name: streaming_server
    restart: unless-stopped
    env_file: [.env]
    environment:
      - RECORD_ROOT=/recordings
      - LOG_DIR=/var/log/streaming
    volumes:
      - ../datas/streaming/recordings:/recordings
      - ../datas/streaming/database:/srv/app/database
      - ../datas/logs/streaming:/var/log/streaming
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:9090/healthz || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 5
    networks: [demo-network]
    depends_on:
      - mediamtx
      - minio
      - minio-init
      - api
      - compute

networks:
  demo-network:
    driver: bridge